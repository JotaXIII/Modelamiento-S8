SET SERVEROUTPUT ON
SET FEEDBACK ON
SET DEFINE OFF

-- ---------------------------------------------------------
-- PASO 1: Limpieza y creación de tablas base
-- ---------------------------------------------------------

BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE detalle_venta CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE venta CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE vendedor CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE administrativo CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE empleado CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE producto CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE marca CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE categoria CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE proveedor CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE comuna CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE region CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE salud CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE afp CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE medio_pago CASCADE CONSTRAINTS PURGE';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

CREATE TABLE region (
  id_region NUMBER(4) NOT NULL,
  nom_region VARCHAR2(255) NOT NULL,
  CONSTRAINT region_pk PRIMARY KEY (id_region)
);

CREATE TABLE comuna (
  id_comuna NUMBER(4) NOT NULL,
  nom_comuna VARCHAR2(100) NOT NULL,
  cod_region NUMBER(4) NOT NULL,
  CONSTRAINT comuna_pk PRIMARY KEY (id_comuna),
  CONSTRAINT comuna_fk_region FOREIGN KEY (cod_region) REFERENCES region(id_region)
);

CREATE TABLE medio_pago (
  id_mpago NUMBER(3) NOT NULL,
  nombre_mpago VARCHAR2(50) NOT NULL,
  CONSTRAINT medio_pago_pk PRIMARY KEY (id_mpago)
);

CREATE TABLE afp (
  id_afp NUMBER(5) GENERATED BY DEFAULT AS IDENTITY (START WITH 210 INCREMENT BY 6) NOT NULL,
  nom_afp VARCHAR2(255) NOT NULL,
  CONSTRAINT afp_pk PRIMARY KEY (id_afp)
);

CREATE TABLE salud (
  id_salud NUMBER(5) NOT NULL,
  nom_salud VARCHAR2(40) NOT NULL,
  CONSTRAINT salud_pk PRIMARY KEY (id_salud)
);

CREATE TABLE proveedor (
  id_proveedor NUMBER(5) NOT NULL,
  nombre_proveedor VARCHAR2(150) NOT NULL,
  rut_proveedor VARCHAR2(10) NOT NULL,
  telefono VARCHAR2(20),
  email VARCHAR2(200),
  direccion VARCHAR2(200),
  cod_comuna NUMBER(4) NOT NULL,
  CONSTRAINT proveedor_pk PRIMARY KEY (id_proveedor),
  CONSTRAINT proveedor_fk_comuna FOREIGN KEY (cod_comuna) REFERENCES comuna(id_comuna)
);

CREATE TABLE categoria (
  id_categoria NUMBER(3) NOT NULL,
  nombre_categoria VARCHAR2(255) NOT NULL,
  CONSTRAINT categoria_pk PRIMARY KEY (id_categoria)
);

CREATE TABLE marca (
  id_marca NUMBER(3) NOT NULL,
  nombre_marca VARCHAR2(25) NOT NULL,
  CONSTRAINT marca_pk PRIMARY KEY (id_marca)
);

CREATE TABLE empleado (
  id_empleado NUMBER(4) NOT NULL,
  rut_empleado VARCHAR2(10) NOT NULL,
  nombre_empleado VARCHAR2(25) NOT NULL,
  apellido_paterno VARCHAR2(25) NOT NULL,
  apellido_materno VARCHAR2(25) NOT NULL,
  fecha_contratacion DATE NOT NULL,
  sueldo_base NUMBER(10) NOT NULL,
  bono_jefatura NUMBER(10),
  activo CHAR(1) NOT NULL,
  tipo_empleado VARCHAR2(25) NOT NULL,
  cod_empleado NUMBER(4),
  cod_salud NUMBER(5) NOT NULL,
  cod_afp NUMBER(5) NOT NULL,
  CONSTRAINT empleado_pk PRIMARY KEY (id_empleado),
  CONSTRAINT empleado_fk_salud FOREIGN KEY (cod_salud) REFERENCES salud(id_salud),
  CONSTRAINT empleado_fk_afp FOREIGN KEY (cod_afp) REFERENCES afp(id_afp),
  CONSTRAINT empleado_fk_empleado FOREIGN KEY (cod_empleado) REFERENCES empleado(id_empleado),
  CONSTRAINT empleado_ck_activo CHECK (activo IN ('S','N'))
);

CREATE TABLE administrativo (
  id_empleado NUMBER(4) NOT NULL,
  CONSTRAINT administrativo_pk PRIMARY KEY (id_empleado),
  CONSTRAINT admin_fk_empleado FOREIGN KEY (id_empleado) REFERENCES empleado(id_empleado)
);

CREATE TABLE vendedor (
  id_empleado NUMBER(4) NOT NULL,
  comision_venta NUMBER(5,2),
  CONSTRAINT vendedor_pk PRIMARY KEY (id_empleado),
  CONSTRAINT vendedor_fk_empleado FOREIGN KEY (id_empleado) REFERENCES empleado(id_empleado)
);

CREATE TABLE producto (
  id_producto NUMBER(4) NOT NULL,
  nombre_producto VARCHAR2(100) NOT NULL,
  precio_unitario NUMBER(8,2) NOT NULL,
  origen_nacional CHAR(1) NOT NULL,
  stock_minimo NUMBER(3) NOT NULL,
  activo CHAR(1) NOT NULL,
  cod_marca NUMBER(3) NOT NULL,
  cod_categoria NUMBER(3) NOT NULL,
  cod_proveedor NUMBER(5) NOT NULL,
  CONSTRAINT producto_pk PRIMARY KEY (id_producto),
  CONSTRAINT producto_fk_marca FOREIGN KEY (cod_marca) REFERENCES marca(id_marca),
  CONSTRAINT producto_fk_categoria FOREIGN KEY (cod_categoria) REFERENCES categoria(id_categoria),
  CONSTRAINT producto_fk_proveedor FOREIGN KEY (cod_proveedor) REFERENCES proveedor(id_proveedor),
  CONSTRAINT producto_ck_activo CHECK (activo IN ('S','N')),
  CONSTRAINT producto_ck_origen CHECK (origen_nacional IN ('S','N'))
);

CREATE TABLE venta (
  id_venta NUMBER(4) GENERATED BY DEFAULT AS IDENTITY (START WITH 5050 INCREMENT BY 3) NOT NULL,
  fecha_venta DATE NOT NULL,
  total_venta NUMBER(10) NOT NULL,
  cod_mpago NUMBER(3) NOT NULL,
  cod_empleado NUMBER(4) NOT NULL,
  CONSTRAINT venta_pk PRIMARY KEY (id_venta),
  CONSTRAINT venta_fk_medio_pago FOREIGN KEY (cod_mpago) REFERENCES medio_pago(id_mpago),
  CONSTRAINT venta_fk_empleado FOREIGN KEY (cod_empleado) REFERENCES empleado(id_empleado)
);

CREATE TABLE detalle_venta (
  cod_venta NUMBER(4) NOT NULL,
  cod_producto NUMBER(4) NOT NULL,
  cantidad NUMBER(3) NOT NULL,
  CONSTRAINT detalle_venta_pk PRIMARY KEY (cod_venta, cod_producto),
  CONSTRAINT det_venta_fk_venta FOREIGN KEY (cod_venta) REFERENCES venta(id_venta),
  CONSTRAINT det_venta_fk_producto FOREIGN KEY (cod_producto) REFERENCES producto(id_producto)
);

BEGIN
  EXECUTE IMMEDIATE 'DROP SEQUENCE seq_empleado';
EXCEPTION WHEN OTHERS THEN NULL; -- ignora si no existe
END;
/
CREATE SEQUENCE seq_empleado START WITH 1 INCREMENT BY 1 NOCACHE;

-- ---------------------------------------------------------
-- CASO 1: Creación condicional de tablas si no existen
-- ---------------------------------------------------------

DECLARE
  v NUMBER;
BEGIN
  SELECT COUNT(*) INTO v FROM user_tables WHERE table_name='REGION';
  IF v=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE region (id_region NUMBER(4) NOT NULL, nom_region VARCHAR2(255) NOT NULL, CONSTRAINT region_pk PRIMARY KEY (id_region))';
  END IF;

  SELECT COUNT(*) INTO v FROM user_tables WHERE table_name='COMUNA';
  IF v=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE comuna (id_comuna NUMBER(4) NOT NULL, nom_comuna VARCHAR2(100) NOT NULL, cod_region NUMBER(4) NOT NULL, CONSTRAINT comuna_pk PRIMARY KEY (id_comuna), CONSTRAINT comuna_fk_region FOREIGN KEY (cod_region) REFERENCES region(id_region))';
  END IF;

  SELECT COUNT(*) INTO v FROM user_tables WHERE table_name='MEDIO_PAGO';
  IF v=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE medio_pago (id_mpago NUMBER(3) NOT NULL, nombre_mpago VARCHAR2(50) NOT NULL, CONSTRAINT medio_pago_pk PRIMARY KEY (id_mpago))';
  END IF;

  SELECT COUNT(*) INTO v FROM user_tables WHERE table_name='AFP';
  IF v=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE afp (id_afp NUMBER(5) GENERATED BY DEFAULT AS IDENTITY (START WITH 210 INCREMENT BY 6) NOT NULL, nom_afp VARCHAR2(255) NOT NULL, CONSTRAINT afp_pk PRIMARY KEY (id_afp))';
  END IF;

  SELECT COUNT(*) INTO v FROM user_tables WHERE table_name='SALUD';
  IF v=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE salud (id_salud NUMBER(5) NOT NULL, nom_salud VARCHAR2(40) NOT NULL, CONSTRAINT salud_pk PRIMARY KEY (id_salud))';
  END IF;

  SELECT COUNT(*) INTO v FROM user_tables WHERE table_name='PROVEEDOR';
  IF v=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE proveedor (id_proveedor NUMBER(5) NOT NULL, nombre_proveedor VARCHAR2(150) NOT NULL, rut_proveedor VARCHAR2(10) NOT NULL, telefono VARCHAR2(20), email VARCHAR2(200), direccion VARCHAR2(200), cod_comuna NUMBER(4) NOT NULL, CONSTRAINT proveedor_pk PRIMARY KEY (id_proveedor), CONSTRAINT proveedor_fk_comuna FOREIGN KEY (cod_comuna) REFERENCES comuna(id_comuna))';
  END IF;

  SELECT COUNT(*) INTO v FROM user_tables WHERE table_name='CATEGORIA';
  IF v=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE categoria (id_categoria NUMBER(3) NOT NULL, nombre_categoria VARCHAR2(255) NOT NULL, CONSTRAINT categoria_pk PRIMARY KEY (id_categoria))';
  END IF;

  SELECT COUNT(*) INTO v FROM user_tables WHERE table_name='MARCA';
  IF v=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE marca (id_marca NUMBER(3) NOT NULL, nombre_marca VARCHAR2(25) NOT NULL, CONSTRAINT marca_pk PRIMARY KEY (id_marca))';
  END IF;

  SELECT COUNT(*) INTO v FROM user_tables WHERE table_name='EMPLEADO';
  IF v=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE empleado (id_empleado NUMBER(4) NOT NULL, rut_empleado VARCHAR2(10) NOT NULL, nombre_empleado VARCHAR2(25) NOT NULL, apellido_paterno VARCHAR2(25) NOT NULL, apellido_materno VARCHAR2(25) NOT NULL, fecha_contratacion DATE NOT NULL, sueldo_base NUMBER(10) NOT NULL, bono_jefatura NUMBER(10), activo CHAR(1) NOT NULL, tipo_empleado VARCHAR2(25) NOT NULL, cod_empleado NUMBER(4), cod_salud NUMBER(5) NOT NULL, cod_afp NUMBER(5) NOT NULL, CONSTRAINT empleado_pk PRIMARY KEY (id_empleado), CONSTRAINT empleado_fk_salud FOREIGN KEY (cod_salud) REFERENCES salud(id_salud), CONSTRAINT empleado_fk_afp FOREIGN KEY (cod_afp) REFERENCES afp(id_afp), CONSTRAINT empleado_fk_empleado FOREIGN KEY (cod_empleado) REFERENCES empleado(id_empleado), CONSTRAINT empleado_ck_activo CHECK (activo IN (''S'',''N'')))';
  END IF;

  SELECT COUNT(*) INTO v FROM user_tables WHERE table_name='ADMINISTRATIVO';
  IF v=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE administrativo (id_empleado NUMBER(4) NOT NULL, CONSTRAINT administrativo_pk PRIMARY KEY (id_empleado), CONSTRAINT admin_fk_empleado FOREIGN KEY (id_empleado) REFERENCES empleado(id_empleado))';
  END IF;

  SELECT COUNT(*) INTO v FROM user_tables WHERE table_name='VENDEDOR';
  IF v=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE vendedor (id_empleado NUMBER(4) NOT NULL, comision_venta NUMBER(5,2), CONSTRAINT vendedor_pk PRIMARY KEY (id_empleado), CONSTRAINT vendedor_fk_empleado FOREIGN KEY (id_empleado) REFERENCES empleado(id_empleado))';
  END IF;

  SELECT COUNT(*) INTO v FROM user_tables WHERE table_name='PRODUCTO';
  IF v=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE producto (id_producto NUMBER(4) NOT NULL, nombre_producto VARCHAR2(100) NOT NULL, precio_unitario NUMBER(8,2) NOT NULL, origen_nacional CHAR(1) NOT NULL, stock_minimo NUMBER(3) NOT NULL, activo CHAR(1) NOT NULL, cod_marca NUMBER(3) NOT NULL, cod_categoria NUMBER(3) NOT NULL, cod_proveedor NUMBER(5) NOT NULL, CONSTRAINT producto_pk PRIMARY KEY (id_producto), CONSTRAINT producto_fk_marca FOREIGN KEY (cod_marca) REFERENCES marca(id_marca), CONSTRAINT producto_fk_categoria FOREIGN KEY (cod_categoria) REFERENCES categoria(id_categoria), CONSTRAINT producto_fk_proveedor FOREIGN KEY (cod_proveedor) REFERENCES proveedor(id_proveedor), CONSTRAINT producto_ck_activo CHECK (activo IN (''S'',''N'')), CONSTRAINT producto_ck_origen CHECK (origen_nacional IN (''S'',''N'')))';
  END IF;

  SELECT COUNT(*) INTO v FROM user_tables WHERE table_name='VENTA';
  IF v=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE venta (id_venta NUMBER(4) GENERATED BY DEFAULT AS IDENTITY (START WITH 5050 INCREMENT BY 3) NOT NULL, fecha_venta DATE NOT NULL, total_venta NUMBER(10) NOT NULL, cod_mpago NUMBER(3) NOT NULL, cod_empleado NUMBER(4) NOT NULL, CONSTRAINT venta_pk PRIMARY KEY (id_venta), CONSTRAINT venta_fk_medio_pago FOREIGN KEY (cod_mpago) REFERENCES medio_pago(id_mpago), CONSTRAINT venta_fk_empleado FOREIGN KEY (cod_empleado) REFERENCES empleado(id_empleado))';
  END IF;

  SELECT COUNT(*) INTO v FROM user_tables WHERE table_name='DETALLE_VENTA';
  IF v=0 THEN
    EXECUTE IMMEDIATE 'CREATE TABLE detalle_venta (cod_venta NUMBER(4) NOT NULL, cod_producto NUMBER(4) NOT NULL, cantidad NUMBER(3) NOT NULL, CONSTRAINT detalle_venta_pk PRIMARY KEY (cod_venta, cod_producto), CONSTRAINT det_venta_fk_venta FOREIGN KEY (cod_venta) REFERENCES venta(id_venta), CONSTRAINT det_venta_fk_producto FOREIGN KEY (cod_producto) REFERENCES producto(id_producto))';
  END IF;
END;
/

-- ---------------------------------------------------------
-- CASO 2: Restricciones adicionales (CHECK, UNIQUE, etc)
-- ---------------------------------------------------------

ALTER TABLE empleado
  ADD CONSTRAINT empleado_ck_sueldo_minimo CHECK (sueldo_base >= 400000);

ALTER TABLE vendedor
  ADD CONSTRAINT vendedor_ck_comision CHECK (comision_venta IS NULL OR (comision_venta >= 0 AND comision_venta <= 0.25));

ALTER TABLE producto
  ADD CONSTRAINT producto_ck_stock_minimo CHECK (stock_minimo >= 3);

ALTER TABLE proveedor
  ADD CONSTRAINT proveedor_un_email UNIQUE (email);

ALTER TABLE marca
  ADD CONSTRAINT marca_un_nombre UNIQUE (nombre_marca);

ALTER TABLE detalle_venta
  ADD CONSTRAINT detalle_venta_ck_cantidad_positiva CHECK (cantidad > 0);




-- SALUD (ids fijos porque no es IDENTITY)
MERGE INTO salud d
USING (SELECT 1 id_salud, 'FONASA' nom_salud FROM dual UNION ALL
       SELECT 2, 'ISAPRE Colmena' FROM dual UNION ALL
       SELECT 3, 'ISAPRE Consalud' FROM dual) s
ON (d.id_salud = s.id_salud)
WHEN NOT MATCHED THEN
  INSERT (id_salud, nom_salud) VALUES (s.id_salud, s.nom_salud);

-- AFP (IDENTITY: cargo nombres, el id se genera desde 210 con step 6)
MERGE INTO afp d
USING (SELECT 'AFP Habitat' nom_afp FROM dual UNION ALL
       SELECT 'AFP Provida' FROM dual UNION ALL
       SELECT 'AFP Capital' FROM dual) s
ON (d.nom_afp = s.nom_afp)
WHEN NOT MATCHED THEN
  INSERT (nom_afp) VALUES (s.nom_afp);

-- MEDIO_PAGO (ids fijos)
MERGE INTO medio_pago d
USING (SELECT 1 id_mpago, 'EFECTIVO' nombre_mpago FROM dual UNION ALL
       SELECT 2, 'DEBITO'   FROM dual UNION ALL
       SELECT 3, 'CREDITO'  FROM dual) s
ON (d.id_mpago = s.id_mpago)
WHEN NOT MATCHED THEN
  INSERT (id_mpago, nombre_mpago) VALUES (s.id_mpago, s.nombre_mpago);

COMMIT;

-- ---------------------------------------------------------
-- CASO 3 Carga de empleados, administrativos y vendedores
-- ---------------------------------------------------------

BEGIN
  EXECUTE IMMEDIATE 'DELETE FROM vendedor';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DELETE FROM administrativo';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'DELETE FROM empleado';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

DECLARE
  v_id     NUMBER;
  v_salud  NUMBER;
  v_afp    NUMBER;
  v_sal    NUMBER;
  v_tipo   VARCHAR2(25);
  v_base8  VARCHAR2(8);
  v_rut    VARCHAR2(10);
BEGIN
  FOR i IN 1..50 LOOP
    SELECT id_salud INTO v_salud FROM (SELECT id_salud FROM salud ORDER BY DBMS_RANDOM.VALUE) WHERE ROWNUM=1;
    SELECT id_afp   INTO v_afp   FROM (SELECT id_afp   FROM afp   ORDER BY DBMS_RANDOM.VALUE) WHERE ROWNUM=1;

    v_id   := seq_empleado.NEXTVAL;
    v_sal  := 450000 + MOD(i,12)*30000;
    v_tipo := CASE WHEN MOD(i,2)=0 THEN 'VENDEDOR' ELSE 'ADMINISTRATIVO' END;

    v_base8 := LPAD(TO_CHAR(10000000 + i), 8, '0');
    v_rut   := v_base8 || '-' || TO_CHAR(MOD(i,10)); -- largo 10

    INSERT INTO empleado (
      id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno,
      fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado,
      cod_empleado, cod_salud, cod_afp
    ) VALUES (
      v_id, v_rut, 'Empleado'||i, 'P'||i, 'M'||i,
      TRUNC(SYSDATE) - (i*7),
      v_sal,
      CASE WHEN MOD(i,5)=0 THEN 80000 ELSE NULL END,
      CASE WHEN MOD(i,17)=0 THEN 'N' ELSE 'S' END,
      v_tipo,
      NULL,
      v_salud,
      v_afp
    );

    IF v_tipo = 'VENDEDOR' THEN
      INSERT INTO vendedor (id_empleado, comision_venta)
      VALUES (v_id, ROUND(MOD(i,26)/100,2));
    ELSE
      INSERT INTO administrativo (id_empleado) VALUES (v_id);
    END IF;
  END LOOP;
END;
/
COMMIT;

-- ---------------------------------------------------------
-- CASO 3: Carga de ventas
-- ---------------------------------------------------------

BEGIN
  FOR j IN 1..120 LOOP
    INSERT INTO venta (fecha_venta, total_venta, cod_mpago, cod_empleado)
    SELECT
      TRUNC(SYSDATE) - TRUNC(DBMS_RANDOM.VALUE(0,120)),
      ROUND(DBMS_RANDOM.VALUE(10000,250000)),
      (SELECT id_mpago FROM (SELECT id_mpago FROM medio_pago ORDER BY DBMS_RANDOM.VALUE) WHERE ROWNUM=1),
      (SELECT id_empleado FROM (
         SELECT v.id_empleado
         FROM vendedor v
         JOIN empleado e ON e.id_empleado = v.id_empleado
         WHERE e.activo='S'
         ORDER BY DBMS_RANDOM.VALUE
       ) WHERE ROWNUM=1)
    FROM dual;
  END LOOP;
END;
/
COMMIT;

-- ---------------------------------------------------------
-- CASO 4: Consultas/Informes finales
-- ---------------------------------------------------------

-- INFORME 1
SELECT
  e.id_empleado                                         AS "IDENTIFICADOR",
  e.nombre_empleado || ' ' || e.apellido_paterno || ' ' ||
  e.apellido_materno                                    AS "NOMBRE COMPLETO",
  e.sueldo_base                                         AS "SALARIO",
  e.bono_jefatura                                       AS "BONIFICACION",
  (e.sueldo_base + e.bono_jefatura)                     AS "SALARIO SIMULADO"
FROM empleado e
WHERE e.activo = 'S'
  AND e.bono_jefatura IS NOT NULL
ORDER BY (e.sueldo_base + e.bono_jefatura) DESC,
         e.apellido_paterno DESC;

-- INFORME 2
SELECT
  e.nombre_empleado || ' ' || e.apellido_paterno || ' ' ||
  e.apellido_materno              AS "EMPLEADO",
  e.sueldo_base                   AS "SUELDO",
  0.08                            AS "POSIBLE AUMENTO",
  (e.sueldo_base * 1.08)          AS "SALARIO SIMULADO"
FROM empleado e
WHERE e.sueldo_base BETWEEN 550000 AND 800000
ORDER BY e.sueldo_base ASC;
